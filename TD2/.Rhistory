select(Country) %>%
group_by(Country) %>%
summarise(Count_Country = n())
world_map <- map_data("world")
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
mp <- ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count_Country), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="Best Actors Around the World",
y="Latitude", x="Longitude",
subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
) +
theme_light
print(mp)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
world_map <- map_data("world")
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
mp <- ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="Best Actors Around the World",
y="Latitude", x="Longitude",
subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
) +
theme_light
print(mp)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
world_map <- map_data("world")
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
mp <- ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="Best Actors Around the World",
y="Latitude", x="Longitude",
subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
) +
print(mp)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
world_map <- map_data("world")
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="Best Actors Around the World",
y="Latitude", x="Longitude",
subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
world_map <- map_data("world")
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
world_map <- map_data("world")
view(world_map)
world_map <- map_data("world")
world_map <- world_map %>%
distinct(region) %>%
select(region)
view(world_map)
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
view(survey_Country)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
survey_Country$Country[survey_Country$Country == 'United States']<- 'USA'
survey_Country$Country[survey_Country$Country == 'United Kingdom']<- 'UK'
view(survey_Country)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
survey_Country$Country[survey_Country$Country == 'United States']<- 'USA'
survey_Country$Country[survey_Country$Country == 'United Kingdom']<- 'UK'
view(survey_Country)
world_map <- map_data("world")
world_map <- world_map %>%
distinct(region) %>%
select(region)
view(world_map)
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
survey_Country$Country[survey_Country$Country == 'United States'] <- 'USA'
survey_Country$Country[survey_Country$Country == 'United Kingdom'] <- 'UK'
# view(survey_Country)
world_map <- map_data("world")
world_map <- world_map %>%
distinct(region) %>%
select(region)
# view(world_map)
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
survey_Country$Country[survey_Country$Country == 'United States'] <- 'USA'
survey_Country$Country[survey_Country$Country == 'United Kingdom'] <- 'UK'
# view(survey_Country)
# world_map <- map_data("world")
# world_map <- world_map %>%
#   distinct(region) %>%
#   select(region)
# view(world_map)
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
# world_map <- map_data("world")
source("~/.active-rstudio-document", encoding = 'UTF-8', echo=TRUE)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
survey_origin <- read_csv("C:/Users/chino/Documents/GitHub/projet-if36-p22-3-mosquetaires/data/survey.csv")
survey_Country <- survey_origin %>%
drop_na(Country) %>%
select(Country) %>%
group_by(Country) %>%
summarise(Count = n())
survey_Country$Country[survey_Country$Country == 'United States'] <- 'USA'
survey_Country$Country[survey_Country$Country == 'United Kingdom'] <- 'UK'
# view(survey_Country)
world_map <- map_data("world")
# world_map <- world_map %>%
#   distinct(region) %>%
#   select(region)
# view(world_map)
survey_MapCountry <- left_join(world_map, survey_Country, by = c("region" = "Country"))
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
shiny::runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
shiny::runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
runApp('GitHub/projet-if36-p22-3-mosquetaires/shiny')
ggplot(survey_MapCountry, aes(x = long, y = lat, group = group)) +
geom_polygon(aes(fill= Count), colour = "black") +
scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
scale_fill_gradient(low = "lightblue", high="steel blue") +
labs(title="The survey realise in xxx",
y="Latitude", x="Longitude",
subtitle = "The plot of the location of the survey\n"
)
if(!require("arules")){install.packages("arules")}if(!require("arulesViz")){install.packages("arulesViz")}
if(!require("arules")){install.packages("arules")}
> if(!require("arulesViz")){install.packages("arulesViz")}
if(!require("arulesViz")){install.packages("arulesViz")}
source("~/GitHub/IF28/TD1.R", echo=TRUE)
txn = read.transactions(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
txn = read.csv(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
library("arules")
inspect(txn)
library("arules")
txn = read.csv(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
inspect(txn)
library("arules")
txn = transactions(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
inspect(txn)
inspect(txn)
txn = transactions(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
library("arules")
txn <- transactions(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
inspect(txn)
library("arules")
txn <- read.transactions(file="transaction.csv", rm.duplicates= FALSE, format="single",sep=",",cols =c(1,2))
inspect(txn)
library("arules")
txn = read.transactions(file="transaction.csv", rm.duplicates = FALSE, format="single",sep=",",cols =c(1,2))
inspect(txn)
inspect(txn)
library("arules")
txn <- read.csv("transaction.csv")
inspect(txn)
library("arules")
txn <- read.csv("transaction.csv")
# inspect(txn)
txn
library("arules")
txn <- read.csv("C:/Users/chino/Documents/GitHub/IF28")
# inspect(txn)
txn
library(arules)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
library(plotrix)
library(rgl)
library(reshape2)
library(shiny)
txn <- read.csv("C:/Users/chino/Documents/GitHub/IF28")
# inspect(txn)
txn
library(arules)
library(ggplot2)
library(dplyr)
library(readr)
library(maps)
library(tidyverse)
library(plotrix)
library(rgl)
library(reshape2)
library(shiny)
txn <- read.csv("C:/Users/chino/Documents/GitHub/IF28/transaction.csv")
# inspect(txn)
txn
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
source("~/GitHub/IF28/TD1.R", echo=TRUE)
inspect(basket_rules)
inspect(basket_rules[1])
library(arules)
# library(ggplot2)
# library(dplyr)
# library(readr)
# library(maps)
# library(tidyverse)
# library(plotrix)
# library(rgl)
# library(reshape2)
# library(shiny)
txn = read.transactions(file="C:/Users/chino/Documents/GitHub/IF28/transaction.csv", rm.duplicates= FALSE,format = "single",sep=",",cols =c(1,2))
# txn <- read.csv("C:/Users/chino/Documents/GitHub/IF28/transaction.csv")
inspect(txn)
itemFrequencyPlot(txn)
basket_rules <- apriori(txn,parameter = list(sup = 0.5,conf = 0.9,target="rules"))
inspect(basket_rules)
inspect(basket_rules[1])
library(arules)
txn = read.transactions(file="C:/Users/chino/Documents/GitHub/IF28/transaction.csv", rm.duplicates= FALSE,format = "single",sep=",",cols =c(1,2))
library(arules)
txn = read.transactions(file="C:/Users/chino/Documents/GitHub/IF28/transaction.csv", rm.duplicates= FALSE,format = "single",sep=",",cols =c(1,2))
inspect(txn)
itemFrequencyPlot(txn)
basket_rules <- apriori(txn,parameter = list(sup = 0.5,conf = 0.9,target="rules"))
inspect(basket_rules)
inspect(basket_rules[1])
library(arules)
data("Epub")
Epub
summary(Epub)
library(arules)
data("Epub")
Epub
summary(Epub)
year <- strftime(as.POSIXlt(transactionInfo(Epub)[[
+ "TimeStamp"]]), "%Y")
table(year)
library(arules)
data("Epub")
Epub
summary(Epub)
year <- strftime(as.POSIXlt(transactionInfo(Epub)[[
+ "TimeStamp"]]), "%Y")
table(year)
library(arules)
data("Epub")
Epub
summary(Epub)
year <- strftime(as.POSIXlt(transactionInfo(Epub)[[
+ "TimeStamp"]]), "%Y")
table(year)
library(arules)
data("Epub")
Epub
summary(Epub)
year <- strftime(as.POSIXlt(transactionInfo(Epub)[[
+ "TimeStamp"]]), "%Y")
year <- strftime(as.POSIXlt(transactionInfo(Epub)[["TimeStamp"]]), "%Y")
table(year)
library(arules)
data("Epub")
Epub
summary(Epub)
year <- strftime(as.POSIXlt(transactionInfo(Epub)[["TimeStamp"]]), "%Y")
table(year)
Epub2003 <- Epub[year == "2003"]
length(Epub2003)
image(Epub2003)
transactionInfo(Epub2003[size(Epub2003) > 20])
inspect(Epub2003[1:5])
as(Epub2003[1:5], "list")
EpubTidLists
EpubTidLists <- as(Epub, "tidLists")
EpubTidLists
as(EpubTidLists[1:3], "list")
data("AdultUCI")
dim(AdultUCI)
AdultUCI[1:2, ]
AdultUCI[["fnlwgt"]] <- NULL
AdultUCI[["education-num"]] <- NULL
data("AdultUCI")
dim(AdultUCI)
AdultUCI[1:2, ]
AdultUCI[["fnlwgt"]] <- NULL
AdultUCI[["education-num"]] <- NULL
AdultUCI[["age"]] <- ordered(cut(AdultUCI[["age"]],c(15, 25, 45, 65, 100)), labels = c("Young", "Middle-aged", "Senior", "Old"))
AdultUCI[["hours-per-week"]] <- ordered(cut(AdultUCI[["hours-per-week" ]], c(0, 25, 40, 60, 168)),labels = c("Part-time", "Full-time", "Over-time", "Workaholic"))
AdultUCI[["capital-gain"]] <- ordered(cut(AdultUCI[["capital-gain" ]], c(-Inf, 0, median(AdultUCI[["capital-gain" ]][AdultUCI[["capital-gain" ]] > 0]),Inf)), labels = c("None", "Low", "High"))
AdultUCI[["capital-loss"]] <- ordered(cut(AdultUCI[["capital-loss" ]], c(-Inf, 0, median(AdultUCI[["capita
Adult <- as(AdultUCI, "transactions")
Adult
Adult <- as(AdultUCI, "transactions")
Adult
summary(Adult)
rules <- apriori(Adult, parameter = list(support = 0.01,confidence = 0.6))
itemFrequencyPlot(Adult, support = 0.1, cex.names = 0.8)
rules
summary(rules)
rules
summary(rules)
rulesIncomeSmall <- subset(rules, subset = rhs %in%"income=small" & lift > 1.2)
rulesIncomeLarge <- subset(rules, subset = rhs %in%"
inspect(head(sort(rulesIncomeSmall, by = "confidence"),n = 3))
inspect(head(sort(rulesIncomeSmall, by = "confidence"),n = 3))
inspect(head(sort(rulesIncomeLarge, by = "confidence"),n = 3))
inspect(head(sort(rulesIncomeLarge, by = "confidence"),n = 3))
rules
summary(rules)
rulesIncomeSmall <- subset(rules, subset = rhs %in%"income=small" & lift > 1.2)
rulesIncomeLarge <- subset(rules, subset = rhs %in%"income=large" & lift > 1.2)
inspect(head(sort(rulesIncomeSmall, by = "confidence"),n = 3))
inspect(head(sort(rulesIncomeLarge, by = "confidence"),n = 3))
write(rulesIncomeSmall, file = "data.csv", sep = ",",col.names = NA)
if(!require("pmml")){install.packages("pmml")}
library("pmml")
rules_pmml <- pmml(rulesIncomeSmall)
saveXML(rules_pmml, file = "data.xml")
library("arulesViz")
data("Groceries")
rules <- apriori(Groceries, parameter = list(supp = 0.001,conf = 0.8))
rules
plot(rules, control=list(jitter=2))
rules_high_lift <- head(sort(rules, by="lift"), 3)
inspect(rules_high_lift)
plot(rules_high_lift, method="graph", control=list(type="items"))
install.packages("tree")
library(tree)
calif = read.table("cadata.txt",header=TRUE)
treefit = tree(log(MedianHouseValue) ~ Longitude+Latitude,data=calif)
summary(treefit)
install.packages("tree")
install.packages("tree")
calif = read.table("cadata.txt",header=TRUE)
calif = read.table("./cadata.txt",header=TRUE)
calif <- read.table("./cadata.txt",header=TRUE)
calif <- read.table("C:/Users/chino/Documents/GitHub/IF28/TD2/cadata.txt",header=TRUE)
treefit <- tree(log(MedianHouseValue) ~ Longitude+Latitude,data=calif)
summary(treefit)
calif <- read.table("./cadata.txt",header=TRUE)
calif <- read.table("cadata.txt",header=TRUE)
setwd("~/Github/IF28/TD2")
library(tree)
calif <- read.table("cadata.txt",header=TRUE)
setwd("~/Github/IF28/TD2")
library(tree)
calif <- read.table("cadata.txt",header=TRUE)
treefit <- tree(log(MedianHouseValue) ~ Longitude+Latitude,data=calif)
summary(treefit)
treefit3 <- tree(log(MedianHouseValue) ~., data=calif)
>install.packages("HSAUR")
install.packages("HSAUR")
install.packages("rpart")
data("Forbes2000", package="HSAUR")
library(rpart)
data("Forbes2000", package="HSAUR")
Forbes2000 <- subset(Forbes2000, !is.na(profits))
forbes_rpart<-rpart(profits~assets+marketvalue+sales,data=Forbes2000)
